#####################################################################
# package RecordSearchSetup:
#
# This file is part of the MsqlCGI package.  The routines in this file
# are dedicated to setting up a search form, and performing a search for
# ar particular record (as well as other accompanying functions).
# 
# Author: Alex Tang <altitude@cic.net> 
# Copyright 1996 Alex Tang and CICNet, Inc.
#####################################################################

package RecordSearchSetup;


##########################################################################
# DoFindRec
#
# This creates PreliminarySearchPage.
##########################################################################
sub main::DoFindRec {
  $priKeyArrNum = $main::tableInfo->{'priKeyArrNum'};

  	# Now do the query and display the results back to the user.
  $DBHost = ( $main::tableInfo->{'DBHost'} ) ?  $main::tableInfo->{'DBHost'} : undef ;
  $DBName = $main::tableInfo->{'DBName'};
  $fieldName = $main::tableInfo->{'TableName'};

  $query = CreateFindQuery ( $fieldName, $main::tData );

  $dbh = &MsqlCGI::SetupMsqlConnection();

  &main::DPrint ( "Doing Query: <pre>$query</pre>" );
  $sth = $dbh->Query ( $query ) || 
  	&main::Error ( "Failed Query: $Msql::db_errstr" );

  $nRows = $sth->numrows;
  $nCols = $sth->numfields;

  if ( $nRows == 0 ) {
    &main::Error ( "Sorry, There were no matches for your query" );
  }

	# Standard crap.  Make sure we print out the MsqlCGI Header so
	# we know what to do with the data when we get the next directive.
  print &Template::GetCGIHeader ( "RecActions" );

  if  ( $nRows > 1 ) {
    $strHeader = "There are $nRows matches for your query:\n";
    $strParagraph1 = "Please click on the checkbox of the record or
    records you would like to select.  Click on the button below<p>";
    $strResetButton = "<input type=reset value=\"Deselect All Records\">";

  } else {
    $strHeader = "There is 1 match for your query:\n";
    $strResetButton = "";
  }

  print &main::HtmlTop ( $strHeader );
  print "$strParagraph1\n<table border width=100%>";

	# Now Fetch the data...
  for ( $i = 0; $i < $nRows; $i++ ) {
    $sth->DataSeek ( $i );
    ( @arr = $sth->FetchRow() ) || &main::Error ( "Error Fetching Row $i" );
    print <<"    EOF";
  <tr>
    EOF

	# We need to setup some information.  
	# If we have more than one match, we need to add an extra table
	# cell for each row.  This will be a checkbox so that the user can
	# selectively choose which  record to display/modify/delete, etc.
	# Oh yeah, this function sets the header string for the form.
    if ( $nRows > 1 ) {
      print <<"      EOF";
    <td><input type=checkbox name="_MsqlCGI_priKey"
        value="$arr[$priKeyArrNum]"> </td>
    <td>
      <table>
      EOF

    } else {
      print <<"      EOF";
    <td>
      <input type=hidden name="_MsqlCGI_priKey"
             value="$arr[$priKeyArrNum]">
      <table>
      EOF
    }


    for ( $j = 0; $j <= $#{$main::tData}; $j++ ) {
      if ( $main::tData->[$j]->{'summary'} ) {
	$strValue = &MsqlCGI::ConvertValue ( $arr[$j], $main::tData->[$j] );
	print <<"        EOF";
        <tr>
	  <td width=22%><font size=-1>$main::tData->[$j]->{'description'}:</font></td>
	  <td width=3%>&nbsp;</td>
	  <td width=75%><b>$strValue</b></td>
	</tr>

        EOF
	
      }
    }
    print "      </table>\n";
    print "    </td>\n";
  }	# end of per Record loop.

  $strDispButton = <<"  EOF";
    <input type=radio name="_MsqlCGI_recAction" value="display" checked>
    Display Selected Record(s)
  EOF

  $strDispHidden = <<"  EOF";
    <input type=hidden name="_MsqlCGI_recAction" value="display">
  EOF

  $strModButton = <<"  EOF";
    <input type=radio name="_MsqlCGI_recAction" value="modify">
    Modify Selected Record
  EOF

  $strDelButton = <<"  EOF";
    <input type=radio name="_MsqlCGI_recAction" value="delete">
    Delete Selected Record(s)
  EOF

  if ( ( $main::tableInfo->{'AllowModify'} ) || 
       ( $main::tableInfo->{'AllowDelete'} ) ) {
    $strRadioButtons = "$strDispButton";
    $strSubmitButton = "Process Selected Record(s)";
    if ( $main::tableInfo->{'AllowModify'} ) {
      $strRadioButtons .= "<br>$strModButton";
    }

    if ( $main::tableInfo->{'AllowDelete'} ) {
      $strRadioButtons .= "<br>$strDelButton";
    }
  } else {
    	
	# this is the special case where we don't have modify or delete
	# privlidges.  So...We're not going to give the user the option to
	# select "Display Record".  We're just going to hide it and make
	# the submit button say "Display Record(s)".
    $strRadioButtons = $strDispHidden;
    $strSubmitButton = "Display Record(s)";
  }

	# Just finish off the form.  Close the table and print the radio
	# buttons and the submit buttons.
  print <<"  EOF";
  </table>
  <p>
  <center>
    <font size=+1>
      $strRadioButtons
    </font>
    <p>
    <input type=submit value="$strSubmitButton">
    $strResetButton
  </center>
  EOF
}


##########################################################################
# CreateCaseString:
# 
# This is basically a utility function that figures out the "Ignore Case"
# cgi form element.  We only need this element if the field is a text or a
# password input field.
##########################################################################
sub CreateCaseString {
  ( $field ) = @_;
  local ( $strRet );
  if ( $field->{'cgiType'} =~ /^(text|password)/i ) {
    $caseName = "_MsqlCGI_ignoreCase-" . $field->{'fieldName'};
    $strRet = <<EOF
	<input type=radio name="$caseName" value="Yes" Checked>&nbsp;Yes<br>
	<input type=radio name="$caseName" value="No">&nbsp;No
EOF
  } else {
    $strRet = "";
  }
  return $strRet;
}

##########################################################################
# CreatePartialString:
# 
# This is basically a utility function that figures out the "Match Whole
# Word Only cgi form element.  We only need this element if the field is a
# text or a password input field.
##########################################################################
sub CreatePartialString {
  ( $field ) = @_;
  local ( $strRet );
  if ( $field->{'cgiType'} =~ /^(text|password)/i ) {
    $caseName = "_MsqlCGI_partialWord-" . $field->{'fieldName'} ;
    $strRet = <<EOF
	<input type=radio name="$caseName" value="Yes" Checked>&nbsp;Yes<br>
	<input type=radio name="$caseName" value="No" >&nbsp;No
EOF
  } else {
    $strRet = "";
  }
  return $strRet;
}

##########################################################################
# DoRecSearchSetup
#
# Setup the RecordSearch form.  
##########################################################################
sub main::DoRecSearchSetup {
  if ( $main::tableInfo->{'RecordSearchTemplate'} ) {
    	# Do custom template for setting up search.
    &Template::DoTemplate ( $main::tableInfo->{'RecordSearchTemplate'},
			   "SEARCH", $sth );
  } else {
    print <<"    EOF";

    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
    <html>
    <head>
      <title>MsqlCGI: Record Selection</title>
    </head>
     
    <h2 align=center>MsqlCGI Record Selection</h2>
    Please enter your search criteria below.  You will then be able to
    view your matches and perform modifications or deletions (if you
    have permission to do so).

    EOF

    print &DoRecordFindSetup();
     
    print &Template::GetHTMLFooter();
  }
}

##########################################################################
# DoCGIHeader
# 
# Setup the header for the Record Find screen.  This is called internally
# by DoRecordFindSetup or by a $CGIHeader token in the
# preliminarySearchTemplate.
##########################################################################
sub DoCGIHeader {
    return  &Template::GetCGIHeader ( "PreliminaryResults" );
}


##########################################################################
# DoRecordFindSetup
#
# Setup the "standard" record selection form.  This form is generated by
# checking which fields have the "searchable" flag set, and creating a
# table element for it.  
#
# This function is normally called internally or by using the
# "$StandardRecordSelection" Template Token in the
# preliminarySearchTemplate.
##########################################################################
sub DoRecordFindSetup {
    $strRet = &DoCGIHeader();

    $strRet .= <<"    EOF";
    
    <table border>
      <tr>
	<th>Field Name</th>
	<th>Data You're Looking For</th>
	<th>Options?</th>
      </tr>

    EOF

    for ( $i = 0; $i <= $#{$main::tData}; $i++ ) {
      if ( $main::tData->[$i]->{'searchable'} ) {
	$desc = $main::tData->[$i]->{'description'};
	$strCGI = DoCreateSearchField ( $main::tData->[$i]->{'fieldName'} );
	$strCGI = MsqlCGI::CreateCGIString 
		( $main::tData->[$i], "SEARCH" );
	#$strCase = &CreateCaseString ( $main::tData->[$i] );
	#$strWord = &CreatePartialString ( $main::tData->[$i] );
	$strCase = &SearchOption ( $main::tData->[$i]->{'fieldName'} );
	$strRet .= <<"        EOF";
      <tr>
	<td><font size=+1>$desc</font></td>
	<td>$strCGI</td>
	<td>$strCase</td>
      </tr>

        EOF
      }
    }

    $strRet .= <<"    EOF";

      <tr>
	<td><font size=+1>Tie Together With</font></td>
	<td><input type=radio name="_MsqlCGI_tie" value="AND" checked> AND<br>
	    <input type=radio name="_MsqlCGI_tie" value="OR">  OR</td>
      </tr>
    </table>

    EOF
  $strRet .= &Template::DoCGIFooter( "SEARCH", $sth );

  return $strRet;
}


#############################################################################
# DoCreateSeearchField
#
# This function is called by a template or interally.  it gets a CGI
# String returns it.
#############################################################################
sub DoCreateSearchField {
  ( $fieldName ) = @_;
  $pData = &MsqlCGI::GetElementStruct ( $fieldName, $main::tData );
  if ( $pData ) {
    $strCGI = MsqlCGI::CreateCGIString ( $pData, "SEARCH" );
  } else {
    $strCGI = "Element: $fieldName, not found.";
  }
  return $strCGI;
}

#############################################################################
# SearchOption
#
# This function is called when we are creating a search form.  Most fields
# have certain "special" search options.  For example, a text field might
# have a case insensitive search option, and int/real might have let the
# search be =, <, >, <=, >=, != etc.  This function takes care of that by
# creating a form variable called "_MsqlCGI_SearchOption_<fieldname>".
#############################################################################
sub SearchOption {
  ( $fieldName ) = @_;

  $pData = &MsqlCGI::GetElementStruct ( $fieldName, $main::tData );

#   if ( $pData->{'special'} ) {
# 	# We're just creating the function name to call here.
#     $funcName = &GetSpecialFunctionName ( $pData, "CreateSearchOptions" );
#     return  &{$funcName}( $main::tableInfo, $pData );
#   } 

  local ( $strRet ) = undef;
  if ( $pData->{'cgiType'} =~ /^(text|password)/ ) {
    if ( $pData->{'fieldType'} eq "char" ) {
      $caseName = "_MsqlCGI_ignoreCase-" . $pData->{'fieldName'};
      $strRet = <<"      EOF";
      <input type=radio name="$caseName" value="Yes"
	  Checked>&nbsp;Case&nbsp;Insensitive,  
      <input type=radio name="$caseName"
	  value="No">&nbsp;Case&nbsp;Sensitive
      EOF
    } elsif ( $pData->{'fieldType'} =~ /^(int|real)/ ) {
      $optionName = "_MsqlCGI_operand-" . $pData->{'fieldName'};
      $strRet = <<"      EOF";
      <select name="$optionName">
        <option>=
	<option>&lt;
	<option>&lt;=
	<option>&gt;
	<option>&gt;=
	<option>&lt;&gt;
      </select>
      EOF
    }
  }
  return $strRet;
}

1;
